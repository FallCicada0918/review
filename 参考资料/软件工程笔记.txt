Maven
  介绍 
    是apache旗下的开源项目 是一个软件工具 是用于管理和构建java项目的工具
  作用
    1. 管理项目依赖 
      方便快捷的管理jar包
      项目需要的依赖能够快速下载
      依赖的的依赖也能自动下载
      pom.xml
    2. 统一项目结构 各种构建工具（idea、eclipse、sts）创建的java项目目录不太一致 ，而maven创建的项目目录是统一的
    3. 项目构建 
      提供了标准的、跨平台的自动化项目构建方式
      项目清理-编译-测试-报告-打包-安装-部署
      1. 【常用】清理 clean：将旧的字节码文件删除
      2. 编译 compile：将java源代码编译成字节码文件
      3. 测试 test：自动调用junit程序测试
      4. 报告 report：程序执行的结果
      5. 【常用】打包 package：java程序打包是jar包
      6. 安装 install：maven的特定概念，将打包的文件复 制到maven仓库的指定位置
      7. 部署 deploy：将工程生成的结果放到容器或者服务器中，使其可以运行
  下载
  安装&配置
  idea中集成maven 
  idea新建maven项目
    1. 新建项目
    2. Java 
    3. 项目名称 maven-test
    4. 位置 /briup/maven/day01/
    5. 选择是否创建git仓库
    6. 构建系统 Maven 
    7. JDK  1.8
    8. 添加示例代码
    9. 高级设置
      组ID（公司域名倒写）：com.briup
      工件ID：和项目名相同
      点击Create
  运行jar包的命令
    java -jar jar包名字.jar 
  maven仓库
    本地仓库 maven的仓库是多个项目共用的
    所以里面的依赖会比较多
  maven目录结构说明
    /src 
      /main
        /java java源代码目录
        /resources配置文件目录
      /test 测试项目资源
        /java 
        /resources
      pom.xml项目配置文件
        配置文件的有什么内容和作用？
  pom.xml
    Project Object Model 项目对象模型
  范围
    <scope>compile</scope>
    1. 默认值 compile 适用于所有阶段
      开发、测试、部署、运行
    2. provided 开发、测试阶段使用
      打包的时候 不需要打包这些依赖
    3. runtime 运行时 比如：jdbc驱动
    4. test 测试时 Junit
  生命周期 lifecycle 
    maven项目中有三套生命周期，了解主要阶段
  maven对项目构建的生命周期划分为clean,default,site
    清理 clean
    测试 test （junit） 编译 、测试
    打包 package 打包的类型：jar war
    安装 install：maven的特定概念，将打包的文件
  idea为了快速使用maven生命周期 提供了一个工具栏 给出了快速访问通道
  生命周期如何执行
    方法1 ：双击idea中的快速通道按钮
    方法2 ：通过maven命令执行 
      mvn clean 
      mvn compile 
      mvn test 
      mav package 
      mvn install 
      ...
  pom.xml文件补充
    
XML 
  介绍
    文件后缀名 .xml
    和html类似的 
    html： 超文本标记语言 
    xml ：可扩展标记语言 EXtensible Markup Language
      可扩展    ：指用户可以自定义标签
      标记语言  ：标签语言 可以用一系列的标签对数据进行描述
        <version>1.0</version>
  XML文档结构 
  作用

  历史 
    1969年 GML 通用标记语言 
    1985年 SGML 标准通用标记语言
    1993年 HTML 超文本标记语言
    1998年 XML 可扩展标记语言 
      HTML语言的标记不能自定义，W3C组织在推出XML的时候，是想替代HTML的，但是两种语言还有差异，所以出现了一个过渡语言XHTML
  对比 
    XML主要是用来 描述 数据
    HTML主要是  展示 数据        
  语法
    3.1 文档声明 需要放到文档的第一行
      <?xml version="1.0" encoding="UTF-8"?>
    3.2 元素 指的就是xml中的标记（标签、节点）
      命名规则
    3.3 属性 
      属性值写到开始标签中 属性值必须加引号 可以是单引号也可以是双引号
      可以有多个属性值
      有多个同名标签时，可以用id区分
    3.4 示例 
      描述以下数据 
        一条消息 
        发送日期 2024-11-21 
        发送人 tom 
        收信人 jerry 
        信息内容 下来吃午饭
    3.5 实体 
        内置 预定义的实体 &lt;
        自定义实体 
    3.6 注释
      <!-- 注释内容 -->
      注释内容中不能出现 --
        <!-- --  -->
      开始标签或者结束标签中不能使用注释
      注释不可以嵌套使用   
  命名空间   
      前缀
      声明前缀属于哪个命名空间 
        xmlns:x
        xmlns:y
      直接定义命名空间
        xmlns="xxx"
    作用：为了让自定义的标签具有唯一性，不会和别人定义的标签有冲突
  约束
    需要用户按照我们的要求去编写XML文件内容的情况下就需要对xml文件内容做出约束
    约束的方式，有两种，语法不同，效果相同
      dtd文件
      schema文件
    良构和有效
      良构：
        xml文件内容，满足基本语法要求，就是良构的
        良构的不一定是有效的
      有效：
        在良构的基础上，满足约束文件的验证，那么就是有效的
        有效的必定是良构的
    DTD约束
      document type define 描述并规定了元素、属性和其他内容在xml中的使用规则
      文件后缀名.dtd
      CDATA：包含不需要解析的文本，属性值可以是任何字符（包括数字和中文）
    Schema约束
    两种约束有何区别？
  XML解析 
    解析方式 是解析xml文档的一种模型、理论、标准
      第一种 DOM 
      第二种 SAX (Simple Api for XML)
    解析器 实现了解析方式的代码
      JAXP （Java API for XMLProcessing），
        不借助于第三方jar包，使用JDK自带的API，就可以完成对XML文档的解析。
        1. DOM 
        2. SAX
      Dom4J
        是一个java的XML api 用来读写xml文件 性能优异 功能强大 开源免费
        使用：
          方式1：下载jar包 自己导入
          方式2：maven项目
        可以读取xml文件
        可以创建xml文件
Git 
  作用 

  常用命令：
    git init 命令用于初始化一个新的Git仓库。这意味着在当前目录下创建一个.git目录，该目录包含了Git的所有版本控制信息。如果你在一个已存在的项目目录中运行这个命令，它会把这个目录变成Git仓库；如果在一个空目录中运行，它会创建一个新的空Git仓库。

    git add 命令用于将文件内容快照添加到暂存区（stage area）。你可以添加一个或多个文件或目录，甚至可以使用.来添加当前目录下的所有文件。这个命令不会直接修改仓库中的文件，而是将变更添加到暂存区，准备进行下一次提交。

    git commit -m "提交信息" 命令用于将暂存区的更改正式提交到仓库中。-m选项后面跟的是提交信息，这是一个简短的描述，说明这次提交做了哪些更改。这个信息对于未来的版本管理和历史查看非常重要。

    git remote add <远程仓库名> <远程仓库URL> 命令用于添加一个新的远程仓库。<远程仓库名>是你为这个远程仓库设置的别名，<远程仓库URL>是该远程仓库的网络地址。通常，人们会使用origin作为默认的远程仓库名。

    git push <远程仓库名> <分支名> 命令用于将本地的更改推送到远程仓库。这个命令实际上是将你本地的提交推送到远程仓库的指定分支上。通常，origin是远程仓库的默认名，master或main是默认的分支名（但Git的默认分支名现在更倾向于使用main）。

    git clone <仓库URL> 命令用于克隆一个远程仓库到本地。它会创建一个新的目录，并在这个目录中复制远程仓库的所有内容。<仓库URL>是你想要克隆的远程仓库的网络地址。

    git pull <远程仓库名> <分支名> 命令用于从远程仓库获取最新版本并合并到本地分支。这个命令实际上是git fetch和git merge的组合，即先获取远程仓库的更改，然后合并到当前分支。

    git status 命令用于显示工作目录和暂存区的状态。它会告诉你哪些文件被修改了但还没有被添加到暂存区，哪些文件已经被添加到暂存区但还没有提交，以及哪些分支是当前分支和远程分支的同步状态等。